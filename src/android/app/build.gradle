import java.nio.file.Paths

group 'es.chipeit.android'
version '1.0'

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "es.chipeit.android"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':lib')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:27.1.1"
    implementation "com.android.support:recyclerview-v7:27.1.1"
    implementation "com.android.support:cardview-v7:27.1.1"
    implementation "com.android.support:support-annotations:27.1.1"
    implementation "com.android.support:design:27.1.1"
    implementation "com.android.support.constraint:constraint-layout:1.1.0"

    implementation "com.yanzhikai:TextPathView:0.1.2"

    androidTestImplementation "com.android.support:support-annotations:27.1.1"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test:rules:1.0.2"

    testImplementation "junit:junit:4.12"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def romsSource = Paths.get(
        projectDir.toString(),
        "../../../roms"
)

def romsDestination = Paths.get(
        projectDir.toString(),
        "src/main/res/raw"
)

def romsIndex = new File(
        romsDestination.toString(),
        "index"
)

task copyRoms(type: Copy) {
    description = "Copy ROMs to res/raw directory, and creates a ROM index file"

    dependsOn {
        deleteRoms
    }

    from (romsSource) {
        exclude "README.md"
    }

    into romsDestination

    // Resource files name must match regex:
    // [a-z]+([a-z] | [0-9] | _)+
    rename { fileName ->
        def newName = 'rom_' + fileName.toLowerCase()
        romsIndex.append(fileName + ":" + newName)
        romsIndex.append('\n')
        return newName
    }
}

task deleteRoms(type: Delete) {
    description = "Delete ROMs from res/raw directory"
    delete fileTree(romsDestination)
}

clean.dependsOn(deleteRoms)

tasks.whenTaskAdded { task ->
    if (task.name != "assembleDebug" && task.name != "assembleRelease")
        return

    task.doFirst {
        copyRoms.execute()
    }
}
